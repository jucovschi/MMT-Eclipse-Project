grammar info.kwarc.mmt.LF hidden (Line_COMMENT) //with org.eclipse.xtext.common.Terminals

generate lF "http://www.kwarc.info/mmt/LF"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model                : {Model}
					   WS* (constructs+=(modelConstructNOSP | termDeclaration) 
					        (WS* (constructs+=modelConstructNOSP | WS constructs+=termDeclaration))* WS*)?
					   (PERCENT DOT notInDocument+=anyTerminal*)?;

modelConstructNOSP   : namespaceDeclarations+=namespaceDeclaration | 
		  			   readDeclarations+=readDeclaration | 
		  			   sigDeclarations+=sigDeclaration | 
		  			   viewDeclarations+=viewDeclaration |
		  			   rawDeclarations+=(abbrevTermDeclaration | nameDeclaration | fixityDeclaration | unknownConstruct);

anyTerminal          : anyDirective|WS|PERCENT|COLON|QUOTE|LCBRACKET|RCBRACKET|LSBRACKET|RSBRACKET|LBRACKET|RBRACKET|
						 DOT|ARROW|LARROW|EQUALS|ASSIGN|TYPE|UNDERSCORE|CID|URISTRING|ILLEGAL_TOKEN;

terminal ML_COMMENT	 : '%{' -> '}%';
terminal ML2_COMMENT : '%*' -> '*%';
terminal Line_COMMENT  : PERCENT ((LINESP | PERCENT) !('\r'|'\n')*)?  '\r'? '\n';

// Reserved characters (can't be part of an identifier)
terminal PERCENT     : '%';
terminal COLON       : ':';
terminal QUOTE       : '"';
terminal LCBRACKET   : '{';
terminal RCBRACKET   : '}';
terminal LSBRACKET   : '[';
terminal RSBRACKET   : ']';
terminal LBRACKET    : '(';
terminal RBRACKET    : ')';
terminal DOT         : '.';
terminal LINESP      : ' '|'\t';
terminal LINEDELIM   : '\r'? '\n';

// Keywords (can't constitute an identifier)
terminal ARROW       : '->';
terminal LARROW      : '<-';
terminal EQUALS      : '=';
terminal ASSIGN      : ':=';
terminal TYPE        : 'type';
terminal UNDERSCORE  : '_';

terminal CID  		 : !(LINESP|'\r'|'\n'|DOT|COLON|LBRACKET|RBRACKET|LSBRACKET|RSBRACKET|LCBRACKET|RCBRACKET|PERCENT|QUOTE)+;
terminal UNKNOWNDIRECTIVE : '%' ('a'..'z'|'A'..'Z'|'0'..'9')+;
terminal URISTRING   : QUOTE -> QUOTE;

// Can't write these directly in rules because 'none' would become a token and would shadow CID
terminal INFIXNONE   : '%infix' LINESP+ 'none';
terminal INFIXLEFT   : '%infix' LINESP+ 'left';
terminal INFIXRIGHT  : '%infix' LINESP+ 'right';

// To avoid lexer errors
terminal ILLEGAL_TOKEN : .;


// Object level

WS             : LINESP | LINEDELIM | ML_COMMENT | ML2_COMMENT;// | SL_COMMENT;
ID             : CID (DOT CID)*;

term           : termArr;
termPi         : LCBRACKET WS* name=(CID|UNDERSCORE) WS* (COLON WS* type=term WS*)? RCBRACKET;
termLambda     : LSBRACKET WS* name=(CID|UNDERSCORE) WS* (COLON WS* type=term WS*)? RSBRACKET;
termArr returns term:
			     termAppOrLambdaOrPi ({term.left=current} WS+ (ARROW|LARROW) WS+ right=termArr)?;
// non-empty term application intermixed with Lambda and Pi quantifiers (possibly in the first position)
termAppOrLambdaOrPi returns term:
				 termLambdaOrPi |
				 left=termAppNoLambdaNoPi (WS* right=termLambdaOrPi)?;
// non-empty term application intermixed with Lambda and Pi quantifiers (but NOT in the first position)
termAppThenLambdaOrPi returns term:
				 left=termAppNoLambdaNoPi (WS* right=termLambdaOrPi)?;
// non-empty sequence of non-quantified terms
termAppNoLambdaNoPi returns term:
				 termBase ({term.left=current} WS+ right=termBase)*;
// [..] {..} .. [..] termApp
termLambdaOrPi returns term:
				 (quantifiers+=(termPi | termLambda) WS*)+ right=termAppThenLambdaOrPi;
// (..) ---or--- TYPE ---or--- UNDERSCORE ---or--- ID
termBase returns term :
				 term=termAtomic |
				 {term} LBRACKET WS* (term=term WS* (COLON WS* type=term WS*)?)? RBRACKET;
termAtomic returns term:   // typing hack, since UNDERSCORE can't return a term
				 atom=TYPE | atom=UNDERSCORE | atom=ID;

morphism       : linkRefs+=[linkDeclaration|ID] (WS+ linkRefs+=[linkDeclaration|ID])*;



// Symbol level - signatures

termDeclaration        : (name=ID) ((WS* COLON WS* type=term)? & (WS+ EQUALS WS+ def=term)?) WS* DOT;
abbrevTermDeclaration  : 
						 '%abbrev' WS+ termDeclaration;
nameDeclaration        : '%name' WS+ name=ID WS+ alias=CID WS* DOT;
fixityDeclaration      : (fixity=INFIXNONE | fixity=INFIXLEFT | fixity=INFIXRIGHT | fixity='%prefix' | fixity='%postfix')
					     WS+ fixityLevel=CID WS+ name=ID WS* DOT;

sigMetaDeclaration     : '%meta' WS+ ref=[sigDeclaration|ID] WS* DOT;
sigIncludeDeclaration  : '%include' WS+ ref=[sigDeclaration|ID] (WS* incOpt=includeOps)? WS* DOT;
structDeclaration      : '%struct' WS+ ('%implicit' WS+)? name=ID
						  (WS+ EQUALS WS+ def=morphism |  // defined via morphism, no domain
						   WS* COLON WS* from=[sigDeclaration|ID]   // domain is given
						    (WS+ EQUALS WS* (def=linkBody | WS def=morphism))?
						  )?
						  (WS* incOpt=includeOps)? WS* DOT;

includeOps             : {includeOps} '%open' (WS+ aliases+=aliasDeclaration)*;
aliasDeclaration       : old=ID (=> WS* '%as' WS+ new=CID)?;



// Symbol level - links (views and structures)

constantAssignment     : name=ID WS* ASSIGN WS+ def=term WS* DOT;
structAssignment       : '%struct' WS+ name=ID WS* ASSIGN WS+ def=morphism WS* DOT;
viewMetaDeclaration    : '%meta' WS+ def=morphism WS* DOT;
viewIncludeDeclaration : '%include' WS+ def=morphism WS* DOT;



// Symbol/module level - unknown constructs

anyDirective           : UNKNOWNDIRECTIVE | '%struct' | '%meta' | '%include' | '%namespace' |
						 '%read' | '%sig' | '%view' | '%implicit' | '%open' | '%as' |
						 '%abbrev' | '%name' | INFIXNONE | INFIXLEFT | INFIXRIGHT | '%prefix' | '%postfix';

// { list of unknown or known constructs }
unknownBrackets        : {unknownBrackets} LCBRACKET (WS+ t+=anyConstruct)* WS* RCBRACKET;
// an unknown construct, optionally starting with a known or unknown directive 
anyConstruct 		   : (t=unknownBody | directive=anyDirective (WS+ t=unknownBody)?) WS* DOT;
// the part of the construct between the directive and the final dot, without surrounding WS
unknownBody            : t+=term
					     (WS* (WS EQUALS (t+=unknownBrackets | WS+ (=> t+=term | t+=unknownBrackets)) |
					     	   ASSIGN (t+=unknownBrackets | WS+ (=> t+=term | t+=unknownBrackets)) | 
					     	   COLON WS* (=> t+=term | t+=unknownBrackets) | 
					     	   anyDirective
					     ))*;
unknownConstruct       : directive=UNKNOWNDIRECTIVE (WS+ t=unknownBody)? WS* DOT;



// Module level - %namespace and %read declarations

namespaceDeclaration   : '%namespace' WS+ (name=CID WS+ EQUALS WS*)? uri=URISTRING WS* DOT;
readDeclaration        : '%read' WS* file=URISTRING WS* DOT;



// Module level - signatures

sigConstructNOSP  : abbrevTermDeclaration | nameDeclaration | fixityDeclaration | unknownConstruct |
					sigMetaDeclaration | sigIncludeDeclaration | structDeclaration |
					sigDeclaration | internalViewDeclaration;
sigConstruct      : sigConstructNOSP | termDeclaration;
sigBody           : {sigBody} LCBRACKET WS* (constructs+=(sigConstructNOSP | termDeclaration)
					    (WS* (constructs+=sigConstructNOSP | WS constructs+=termDeclaration))* WS*)? RCBRACKET;
sigDeclaration    : '%sig' WS+ name=CID WS+ EQUALS WS* def=sigBody WS* DOT;


// Module level - views

linkConstructNOSP :	structAssignment | viewMetaDeclaration | viewIncludeDeclaration | unknownConstruct;
linkConstruct     : linkConstructNOSP | constantAssignment;
linkBody          : {linkBody} LCBRACKET WS* (constructs+=(linkConstructNOSP | constantAssignment) 
					    (WS* (constructs+=linkConstructNOSP | WS constructs+=constantAssignment))* WS*)? RCBRACKET;
viewDeclaration   : '%view' WS+ ('%implicit' WS+)? name=CID 
				 	WS* COLON WS* from=[sigDeclaration|ID] WS+ ARROW WS+ to=morphism
				 	WS+ EQUALS WS*
				 	(def=linkBody | WS def=morphism)
				 	WS* DOT;
// view inside signature. Codomain is optional
internalViewDeclaration :
					'%view' WS+ ('%implicit' WS+)? name=CID 
				 	WS* COLON WS* from=[sigDeclaration|ID] WS+ ARROW WS+ (to=morphism WS+)?
				 	EQUALS WS*
				 	(def=linkBody | WS def=morphism)
				 	WS* DOT;
linkDeclaration   : viewDeclaration | internalViewDeclaration | structDeclaration | sigIncludeDeclaration | sigMetaDeclaration;

// hack for adding an absoluteURI field to all these types
TempType : {namespaceDeclaration} | {sigDeclaration} | {viewDeclaration} | {internalViewDeclaration} | {sigIncludeDeclaration} | 
		   {structAssignment} | {constantAssignment} | {termDeclaration} | {abbrevTermDeclaration} | {structDeclaration} | fullURI = CID;
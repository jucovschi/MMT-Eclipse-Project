/*
* generated by Xtext
*/
grammar InternalLF;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package info.kwarc.mmt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package info.kwarc.mmt.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import info.kwarc.mmt.services.LFGrammarAccess;

}

@parser::members {

 	private LFGrammarAccess grammarAccess;
 	
    public InternalLFParser(TokenStream input, LFGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected LFGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsNamespaceDeclarationParserRuleCall_0_0()); 
	    }
		lv_declarations_0_1=rulenamespaceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_1, 
        		"namespaceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsSignatureDeclarationParserRuleCall_0_1()); 
	    }
		lv_declarations_0_2=rulesignatureDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_2, 
        		"signatureDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsReadDeclarationParserRuleCall_0_2()); 
	    }
		lv_declarations_0_3=rulereadDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_3, 
        		"readDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDeclarationsViewDeclarationParserRuleCall_0_3()); 
	    }
		lv_declarations_0_4=ruleviewDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_0_4, 
        		"viewDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*
;





// Entry rule entryRuleNAMESPACE
entryRuleNAMESPACE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMESPACERule()); } 
	 iv_ruleNAMESPACE=ruleNAMESPACE 
	 { $current=$iv_ruleNAMESPACE.current.getText(); }  
	 EOF 
;

// Rule NAMESPACE
ruleNAMESPACE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNAMESPACEAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNAMESPACEAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getNAMESPACEAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleURI
entryRuleURI returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getURIRule()); } 
	 iv_ruleURI=ruleURI 
	 { $current=$iv_ruleURI.current.getText(); }  
	 EOF 
;

// Rule URI
ruleURI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getURIAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw='://' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getURIAccess().getColonSolidusSolidusKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getURIAccess().getNAMESPACEParserRuleCall_1()); 
    }
    this_NAMESPACE_2=ruleNAMESPACE    {
		$current.merge(this_NAMESPACE_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getURIAccess().getSolidusKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getURIAccess().getIDTerminalRuleCall_2_1()); 
    }
)*)
    ;





// Entry rule entryRuleURISTRING
entryRuleURISTRING returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getURISTRINGRule()); } 
	 iv_ruleURISTRING=ruleURISTRING 
	 { $current=$iv_ruleURISTRING.current.getText(); }  
	 EOF 
;

// Rule URISTRING
ruleURISTRING returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getURISTRINGAccess().getQuotationMarkKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getURISTRINGAccess().getURIParserRuleCall_1()); 
    }
    this_URI_1=ruleURI    {
		$current.merge(this_URI_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getURISTRINGAccess().getQuotationMarkKeyword_2()); 
    }
)
    ;





// Entry rule entryRulereadDeclaration
entryRulereadDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReadDeclarationRule()); }
	 iv_rulereadDeclaration=rulereadDeclaration 
	 { $current=$iv_rulereadDeclaration.current; } 
	 EOF 
;

// Rule readDeclaration
rulereadDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%read' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReadDeclarationAccess().getReadKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReadDeclarationAccess().getFileURISTRINGParserRuleCall_1_0()); 
	    }
		lv_file_1_0=ruleURISTRING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReadDeclarationRule());
	        }
       		set(
       			$current, 
       			"file",
        		lv_file_1_0, 
        		"URISTRING");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReadDeclarationAccess().getFullStopKeyword_2());
    }
)
;





// Entry rule entryRulenamespaceDeclaration
entryRulenamespaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceDeclarationRule()); }
	 iv_rulenamespaceDeclaration=rulenamespaceDeclaration 
	 { $current=$iv_rulenamespaceDeclaration.current; } 
	 EOF 
;

// Rule namespaceDeclaration
rulenamespaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0());
    }
((
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNamespaceDeclarationAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamespaceDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamespaceDeclarationAccess().getEqualsSignKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDeclarationAccess().getUriURISTRINGParserRuleCall_2_0()); 
	    }
		lv_uri_3_0=ruleURISTRING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDeclarationRule());
	        }
       		set(
       			$current, 
       			"uri",
        		lv_uri_3_0, 
        		"URISTRING");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNamespaceDeclarationAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRulesignatureDeclaration
entryRulesignatureDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignatureDeclarationRule()); }
	 iv_rulesignatureDeclaration=rulesignatureDeclaration 
	 { $current=$iv_rulesignatureDeclaration.current; } 
	 EOF 
;

// Rule signatureDeclaration
rulesignatureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%sig' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignatureDeclarationAccess().getSigKeyword_0());
    }
(
(
		lv_sigName_1_0=RULE_ID
		{
			newLeafNode(lv_sigName_1_0, grammarAccess.getSignatureDeclarationAccess().getSigNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignatureDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sigName",
        		lv_sigName_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignatureDeclarationAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignatureDeclarationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsSigDefinitionsParserRuleCall_4_0()); 
	    }
		lv_sigDefinitions_4_0=rulesigDefinitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureDeclarationRule());
	        }
       		add(
       			$current, 
       			"sigDefinitions",
        		lv_sigDefinitions_4_0, 
        		"sigDefinitions");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignatureDeclarationAccess().getRightCurlyBracketKeyword_5());
    }
	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSignatureDeclarationAccess().getFullStopKeyword_6());
    }
)
;





// Entry rule entryRulesigDefinitions
entryRulesigDefinitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSigDefinitionsRule()); }
	 iv_rulesigDefinitions=rulesigDefinitions 
	 { $current=$iv_rulesigDefinitions.current; } 
	 EOF 
;

// Rule sigDefinitions
rulesigDefinitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_symbName_0_0=RULE_ID
		{
			newLeafNode(lv_symbName_0_0, grammarAccess.getSigDefinitionsAccess().getSymbNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSigDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"symbName",
        		lv_symbName_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSigDefinitionsAccess().getColonKeyword_0_1_0());
    }

    |	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSigDefinitionsAccess().getColonEqualsSignKeyword_0_1_1());
    }
)((
(
		lv_type_3_0=RULE_ID
		{
			newLeafNode(lv_type_3_0, grammarAccess.getSigDefinitionsAccess().getTypeIDTerminalRuleCall_0_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSigDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ID");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSigDefinitionsAccess().getEqualsSignKeyword_0_2_1());
    }
)?
    { 
        newCompositeNode(grammarAccess.getSigDefinitionsAccess().getNAMESPACEParserRuleCall_0_3()); 
    }
ruleNAMESPACE
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_0_4());
    }
)
    |(	otherlv_7='%include' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSigDefinitionsAccess().getIncludeKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDefinitionsAccess().getNamespaceNAMESPACEParserRuleCall_1_1_0()); 
	    }
		lv_namespace_8_0=ruleNAMESPACE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDefinitionsRule());
	        }
       		set(
       			$current, 
       			"namespace",
        		lv_namespace_8_0, 
        		"NAMESPACE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='.' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_1_2());
    }
)
    |(	otherlv_10='%struct' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSigDefinitionsAccess().getStructKeyword_2_0());
    }
(
(
		lv_structName_11_0=RULE_ID
		{
			newLeafNode(lv_structName_11_0, grammarAccess.getSigDefinitionsAccess().getStructNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSigDefinitionsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"structName",
        		lv_structName_11_0, 
        		"ID");
	    }

)
)	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSigDefinitionsAccess().getColonKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSigDefinitionsAccess().getNamespaceNAMESPACEParserRuleCall_2_3_0()); 
	    }
		lv_namespace_13_0=ruleNAMESPACE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSigDefinitionsRule());
	        }
       		set(
       			$current, 
       			"namespace",
        		lv_namespace_13_0, 
        		"NAMESPACE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='.' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_2_4());
    }
))
;







// Entry rule entryRuleviewDeclaration
entryRuleviewDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewDeclarationRule()); }
	 iv_ruleviewDeclaration=ruleviewDeclaration 
	 { $current=$iv_ruleviewDeclaration.current; } 
	 EOF 
;

// Rule viewDeclaration
ruleviewDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%view' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getViewDeclarationAccess().getViewKeyword_0());
    }
(
(
		lv_viewID_1_0=RULE_ID
		{
			newLeafNode(lv_viewID_1_0, grammarAccess.getViewDeclarationAccess().getViewIDIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"viewID",
        		lv_viewID_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getViewDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewDeclarationAccess().getFromNAMESPACEParserRuleCall_3_0()); 
	    }
		lv_from_3_0=ruleNAMESPACE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewDeclarationRule());
	        }
       		set(
       			$current, 
       			"from",
        		lv_from_3_0, 
        		"NAMESPACE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getViewDeclarationAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewDeclarationAccess().getToNAMESPACEParserRuleCall_5_0()); 
	    }
		lv_to_5_0=ruleNAMESPACE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewDeclarationRule());
	        }
       		set(
       			$current, 
       			"to",
        		lv_to_5_0, 
        		"NAMESPACE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getViewDeclarationAccess().getEqualsSignKeyword_6());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getViewDeclarationAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getViewDeclarationAccess().getViewDefinitionsSigDefinitionsParserRuleCall_8_0()); 
	    }
		lv_viewDefinitions_8_0=rulesigDefinitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getViewDeclarationRule());
	        }
       		add(
       			$current, 
       			"viewDefinitions",
        		lv_viewDefinitions_8_0, 
        		"sigDefinitions");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getViewDeclarationAccess().getRightCurlyBracketKeyword_9());
    }
	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getViewDeclarationAccess().getFullStopKeyword_10());
    }
)
;





RULE_INT : ('0'..'9')+;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'0'..'9')*;

RULE_ML_COMMENT : '%{' ( options {greedy=false;} : . )*'}%';

RULE_ML2_COMMENT : '%*' ( options {greedy=false;} : . )*'*%';

RULE_SL_COMMENT : '%' (' '|'%') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;



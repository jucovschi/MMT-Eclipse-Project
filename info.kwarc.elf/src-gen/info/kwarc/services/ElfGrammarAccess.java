/*
* generated by Xtext
*/

package info.kwarc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ElfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cDeclarationsAlternatives_0 = (Alternatives)cDeclarationsAssignment.eContents().get(0);
		private final RuleCall cDeclarationsNamespaceDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAlternatives_0.eContents().get(0);
		private final RuleCall cDeclarationsSignatureDeclarationParserRuleCall_0_1 = (RuleCall)cDeclarationsAlternatives_0.eContents().get(1);
		
		//Model:
		//	declarations+=(namespaceDeclaration | signatureDeclaration)*;
		public ParserRule getRule() { return rule; }

		//declarations+=(namespaceDeclaration | signatureDeclaration)*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }

		//namespaceDeclaration | signatureDeclaration
		public Alternatives getDeclarationsAlternatives_0() { return cDeclarationsAlternatives_0; }

		//namespaceDeclaration
		public RuleCall getDeclarationsNamespaceDeclarationParserRuleCall_0_0() { return cDeclarationsNamespaceDeclarationParserRuleCall_0_0; }

		//signatureDeclaration
		public RuleCall getDeclarationsSignatureDeclarationParserRuleCall_0_1() { return cDeclarationsSignatureDeclarationParserRuleCall_0_1; }
	}

	public class NamespaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "namespaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cUriAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cUriURITerminalRuleCall_1_0_2_0 = (RuleCall)cUriAssignment_1_0_2.eContents().get(0);
		private final Assignment cUriAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cUriURITerminalRuleCall_1_1_0 = (RuleCall)cUriAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//namespaceDeclaration:
		//	"%namespace" (name=ID "=" uri=URI | uri=URI) ".";
		public ParserRule getRule() { return rule; }

		//"%namespace" (name=ID "=" uri=URI | uri=URI) "."
		public Group getGroup() { return cGroup; }

		//"%namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=ID "=" uri=URI | uri=URI
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=ID "=" uri=URI
		public Group getGroup_1_0() { return cGroup_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_0() { return cNameAssignment_1_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }

		//uri=URI
		public Assignment getUriAssignment_1_0_2() { return cUriAssignment_1_0_2; }

		//URI
		public RuleCall getUriURITerminalRuleCall_1_0_2_0() { return cUriURITerminalRuleCall_1_0_2_0; }

		//uri=URI
		public Assignment getUriAssignment_1_1() { return cUriAssignment_1_1; }

		//URI
		public RuleCall getUriURITerminalRuleCall_1_1_0() { return cUriURITerminalRuleCall_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class SignatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "signatureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSigNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSigNameIDTerminalRuleCall_1_0 = (RuleCall)cSigNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSigDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSigDefinitionsSigDefinitionsParserRuleCall_4_0 = (RuleCall)cSigDefinitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//signatureDeclaration:
		//	"%sig" sigName=ID "=" "{" sigDefinitions+=sigDefinitions* "}" ".";
		public ParserRule getRule() { return rule; }

		//"%sig" sigName=ID "=" "{" sigDefinitions+=sigDefinitions* "}" "."
		public Group getGroup() { return cGroup; }

		//"%sig"
		public Keyword getSigKeyword_0() { return cSigKeyword_0; }

		//sigName=ID
		public Assignment getSigNameAssignment_1() { return cSigNameAssignment_1; }

		//ID
		public RuleCall getSigNameIDTerminalRuleCall_1_0() { return cSigNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//sigDefinitions+=sigDefinitions*
		public Assignment getSigDefinitionsAssignment_4() { return cSigDefinitionsAssignment_4; }

		//sigDefinitions
		public RuleCall getSigDefinitionsSigDefinitionsParserRuleCall_4_0() { return cSigDefinitionsSigDefinitionsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//"."
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
	}

	public class SigDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sigDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSymbNameIDTerminalRuleCall_0_0 = (RuleCall)cSymbNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//sigDefinitions:
		//	symbName=ID ":" type=ID ("=" ID+)? ".";
		public ParserRule getRule() { return rule; }

		//symbName=ID ":" type=ID ("=" ID+)? "."
		public Group getGroup() { return cGroup; }

		//symbName=ID
		public Assignment getSymbNameAssignment_0() { return cSymbNameAssignment_0; }

		//ID
		public RuleCall getSymbNameIDTerminalRuleCall_0_0() { return cSymbNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }

		//("=" ID+)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//ID+
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class TempTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TempType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cNamespaceDeclarationAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Action cSignatureDeclarationAction_1 = (Action)cAlternatives.eContents().get(1);
		private final Assignment cFullURIAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFullURIIDTerminalRuleCall_2_0 = (RuleCall)cFullURIAssignment_2.eContents().get(0);
		
		//TempType:
		//	{namespaceDeclaration} | {signatureDeclaration} | fullURI=ID;
		public ParserRule getRule() { return rule; }

		//{namespaceDeclaration} | {signatureDeclaration} | fullURI=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{namespaceDeclaration}
		public Action getNamespaceDeclarationAction_0() { return cNamespaceDeclarationAction_0; }

		//{signatureDeclaration}
		public Action getSignatureDeclarationAction_1() { return cSignatureDeclarationAction_1; }

		//fullURI=ID
		public Assignment getFullURIAssignment_2() { return cFullURIAssignment_2; }

		//ID
		public RuleCall getFullURIIDTerminalRuleCall_2_0() { return cFullURIIDTerminalRuleCall_2_0; }
	}
	
	
	private ModelElements pModel;
	private TerminalRule tINT;
	private TerminalRule tURI;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tML2_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tANY_OTHER;
	private NamespaceDeclarationElements pNamespaceDeclaration;
	private SignatureDeclarationElements pSignatureDeclaration;
	private SigDefinitionsElements pSigDefinitions;
	private TempTypeElements pTempType;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public ElfGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//	declarations+=(namespaceDeclaration | signatureDeclaration)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal URI:
	//	"\"" ("a".."z" | "A".."Z" | "/" | ":" | "." | "-" | "%")+ "\"";
	public TerminalRule getURIRule() {
		return (tURI != null) ? tURI : (tURI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URI"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"%{"->"}%";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal ML2_COMMENT:
	//	"%*"->"*%";
	public TerminalRule getML2_COMMENTRule() {
		return (tML2_COMMENT != null) ? tML2_COMMENT : (tML2_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML2_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"%" (" " | "%") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	!("\"" | "\'" | "%" | "*" | "{" | "}" | "." | "[" | "]" | "=" | ":" | " ")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//namespaceDeclaration:
	//	"%namespace" (name=ID "=" uri=URI | uri=URI) ".";
	public NamespaceDeclarationElements getNamespaceDeclarationAccess() {
		return (pNamespaceDeclaration != null) ? pNamespaceDeclaration : (pNamespaceDeclaration = new NamespaceDeclarationElements());
	}
	
	public ParserRule getNamespaceDeclarationRule() {
		return getNamespaceDeclarationAccess().getRule();
	}

	//signatureDeclaration:
	//	"%sig" sigName=ID "=" "{" sigDefinitions+=sigDefinitions* "}" ".";
	public SignatureDeclarationElements getSignatureDeclarationAccess() {
		return (pSignatureDeclaration != null) ? pSignatureDeclaration : (pSignatureDeclaration = new SignatureDeclarationElements());
	}
	
	public ParserRule getSignatureDeclarationRule() {
		return getSignatureDeclarationAccess().getRule();
	}

	//sigDefinitions:
	//	symbName=ID ":" type=ID ("=" ID+)? ".";
	public SigDefinitionsElements getSigDefinitionsAccess() {
		return (pSigDefinitions != null) ? pSigDefinitions : (pSigDefinitions = new SigDefinitionsElements());
	}
	
	public ParserRule getSigDefinitionsRule() {
		return getSigDefinitionsAccess().getRule();
	}

	//TempType:
	//	{namespaceDeclaration} | {signatureDeclaration} | fullURI=ID;
	public TempTypeElements getTempTypeAccess() {
		return (pTempType != null) ? pTempType : (pTempType = new TempTypeElements());
	}
	
	public ParserRule getTempTypeRule() {
		return getTempTypeAccess().getRule();
	}
}

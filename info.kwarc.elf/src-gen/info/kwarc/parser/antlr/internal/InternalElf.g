/*
* generated by Xtext
*/
grammar InternalElf;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package info.kwarc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package info.kwarc.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import info.kwarc.services.ElfGrammarAccess;

}

@parser::members {

 	private ElfGrammarAccess grammarAccess;
 	
    public InternalElfParser(TokenStream input, IAstFactory factory, ElfGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("info/kwarc/parser/antlr/internal/InternalElf.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ElfGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDeclarationsNamespaceDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_declarations_0_1=rulenamespaceDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"declarations",
	        		lv_declarations_0_1, 
	        		"namespaceDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDeclarationsSignatureDeclarationParserRuleCall_0_1(), currentNode); 
	    }
		lv_declarations_0_2=rulesignatureDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"declarations",
	        		lv_declarations_0_2, 
	        		"signatureDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)*
;





// Entry rule entryRulenamespaceDeclaration
entryRulenamespaceDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamespaceDeclarationRule(), currentNode); }
	 iv_rulenamespaceDeclaration=rulenamespaceDeclaration 
	 { $current=$iv_rulenamespaceDeclaration.current; } 
	 EOF 
;

// Rule namespaceDeclaration
rulenamespaceDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'%namespace' 
    {
        createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0(), null); 
    }
(((
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getNameIDTerminalRuleCall_1_0_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamespaceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getEqualsSignKeyword_1_0_1(), null); 
    }
(
(
		lv_uri_3_0=RULE_URI
		{
			createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_0_2_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamespaceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_3_0, 
	        		"URI", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(
(
		lv_uri_4_0=RULE_URI
		{
			createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_1_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamespaceDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_4_0, 
	        		"URI", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	'.' 
    {
        createLeafNode(grammarAccess.getNamespaceDeclarationAccess().getFullStopKeyword_2(), null); 
    }
)
;





// Entry rule entryRulesignatureDeclaration
entryRulesignatureDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSignatureDeclarationRule(), currentNode); }
	 iv_rulesignatureDeclaration=rulesignatureDeclaration 
	 { $current=$iv_rulesignatureDeclaration.current; } 
	 EOF 
;

// Rule signatureDeclaration
rulesignatureDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'%sig' 
    {
        createLeafNode(grammarAccess.getSignatureDeclarationAccess().getSigKeyword_0(), null); 
    }
(
(
		lv_sigName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSignatureDeclarationAccess().getSigNameIDTerminalRuleCall_1_0(), "sigName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignatureDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sigName",
	        		lv_sigName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getSignatureDeclarationAccess().getEqualsSignKeyword_2(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getSignatureDeclarationAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsSigDefinitionsParserRuleCall_4_0(), currentNode); 
	    }
		lv_sigDefinitions_4_0=rulesigDefinitions		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSignatureDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sigDefinitions",
	        		lv_sigDefinitions_4_0, 
	        		"sigDefinitions", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getSignatureDeclarationAccess().getRightCurlyBracketKeyword_5(), null); 
    }
	'.' 
    {
        createLeafNode(grammarAccess.getSignatureDeclarationAccess().getFullStopKeyword_6(), null); 
    }
)
;





// Entry rule entryRulesigDefinitions
entryRulesigDefinitions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSigDefinitionsRule(), currentNode); }
	 iv_rulesigDefinitions=rulesigDefinitions 
	 { $current=$iv_rulesigDefinitions.current; } 
	 EOF 
;

// Rule sigDefinitions
rulesigDefinitions returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_symbName_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSigDefinitionsAccess().getSymbNameIDTerminalRuleCall_0_0(), "symbName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"symbName",
	        		lv_symbName_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSigDefinitionsAccess().getColonKeyword_1(), null); 
    }
(
(
		lv_type_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSigDefinitionsAccess().getTypeIDTerminalRuleCall_2_0(), "type"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSigDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getSigDefinitionsAccess().getEqualsSignKeyword_3_0(), null); 
    }
(RULE_ID
    { 
    createLeafNode(grammarAccess.getSigDefinitionsAccess().getIDTerminalRuleCall_3_1(), null); 
    }
)+)?	'.' 
    {
        createLeafNode(grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_4(), null); 
    }
)
;







RULE_INT : ('0'..'9')+;

RULE_URI : '"' ('a'..'z'|'A'..'Z'|'/'|':'|'.'|'-'|'%')+ '"';

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '%{' ( options {greedy=false;} : . )*'}%';

RULE_ML2_COMMENT : '%*' ( options {greedy=false;} : . )*'*%';

RULE_SL_COMMENT : '%' (' '|'%') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ~(('"'|'\''|'%'|'*'|'{'|'}'|'.'|'['|']'|'='|':'|' '))*;

RULE_ANY_OTHER : .;



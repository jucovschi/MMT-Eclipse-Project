/*
* generated by Xtext
*/
package info.kwarc.mmt.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import info.kwarc.mmt.services.LFGrammarAccess;

public class LFParser extends AbstractContentAssistParser {
	
	@Inject
	private LFGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected info.kwarc.mmt.ui.contentassist.antlr.internal.InternalLFParser createParser() {
		info.kwarc.mmt.ui.contentassist.antlr.internal.InternalLFParser result = new info.kwarc.mmt.ui.contentassist.antlr.internal.InternalLFParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getDeclarationsAlternatives_0(), "rule__Model__DeclarationsAlternatives_0");
					put(grammarAccess.getSigDefinitionsAccess().getAlternatives(), "rule__SigDefinitions__Alternatives");
					put(grammarAccess.getSigDefinitionsAccess().getAlternatives_0_1(), "rule__SigDefinitions__Alternatives_0_1");
					put(grammarAccess.getTempTypeAccess().getAlternatives(), "rule__TempType__Alternatives");
					put(grammarAccess.getNAMESPACEAccess().getGroup(), "rule__NAMESPACE__Group__0");
					put(grammarAccess.getNAMESPACEAccess().getGroup_1(), "rule__NAMESPACE__Group_1__0");
					put(grammarAccess.getURIAccess().getGroup(), "rule__URI__Group__0");
					put(grammarAccess.getURIAccess().getGroup_0(), "rule__URI__Group_0__0");
					put(grammarAccess.getURIAccess().getGroup_2(), "rule__URI__Group_2__0");
					put(grammarAccess.getURISTRINGAccess().getGroup(), "rule__URISTRING__Group__0");
					put(grammarAccess.getReadDeclarationAccess().getGroup(), "rule__ReadDeclaration__Group__0");
					put(grammarAccess.getNamespaceDeclarationAccess().getGroup(), "rule__NamespaceDeclaration__Group__0");
					put(grammarAccess.getNamespaceDeclarationAccess().getGroup_1(), "rule__NamespaceDeclaration__Group_1__0");
					put(grammarAccess.getSignatureDeclarationAccess().getGroup(), "rule__SignatureDeclaration__Group__0");
					put(grammarAccess.getSigDefinitionsAccess().getGroup_0(), "rule__SigDefinitions__Group_0__0");
					put(grammarAccess.getSigDefinitionsAccess().getGroup_0_2(), "rule__SigDefinitions__Group_0_2__0");
					put(grammarAccess.getSigDefinitionsAccess().getGroup_1(), "rule__SigDefinitions__Group_1__0");
					put(grammarAccess.getSigDefinitionsAccess().getGroup_2(), "rule__SigDefinitions__Group_2__0");
					put(grammarAccess.getViewDeclarationAccess().getGroup(), "rule__ViewDeclaration__Group__0");
					put(grammarAccess.getModelAccess().getDeclarationsAssignment(), "rule__Model__DeclarationsAssignment");
					put(grammarAccess.getReadDeclarationAccess().getFileAssignment_1(), "rule__ReadDeclaration__FileAssignment_1");
					put(grammarAccess.getNamespaceDeclarationAccess().getNameAssignment_1_0(), "rule__NamespaceDeclaration__NameAssignment_1_0");
					put(grammarAccess.getNamespaceDeclarationAccess().getUriAssignment_2(), "rule__NamespaceDeclaration__UriAssignment_2");
					put(grammarAccess.getSignatureDeclarationAccess().getSigNameAssignment_1(), "rule__SignatureDeclaration__SigNameAssignment_1");
					put(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsAssignment_4(), "rule__SignatureDeclaration__SigDefinitionsAssignment_4");
					put(grammarAccess.getSigDefinitionsAccess().getSymbNameAssignment_0_0(), "rule__SigDefinitions__SymbNameAssignment_0_0");
					put(grammarAccess.getSigDefinitionsAccess().getTypeAssignment_0_2_0(), "rule__SigDefinitions__TypeAssignment_0_2_0");
					put(grammarAccess.getSigDefinitionsAccess().getNamespaceAssignment_1_1(), "rule__SigDefinitions__NamespaceAssignment_1_1");
					put(grammarAccess.getSigDefinitionsAccess().getStructNameAssignment_2_1(), "rule__SigDefinitions__StructNameAssignment_2_1");
					put(grammarAccess.getSigDefinitionsAccess().getNamespaceAssignment_2_3(), "rule__SigDefinitions__NamespaceAssignment_2_3");
					put(grammarAccess.getTempTypeAccess().getFullURIAssignment_2(), "rule__TempType__FullURIAssignment_2");
					put(grammarAccess.getViewDeclarationAccess().getViewIDAssignment_1(), "rule__ViewDeclaration__ViewIDAssignment_1");
					put(grammarAccess.getViewDeclarationAccess().getFromAssignment_3(), "rule__ViewDeclaration__FromAssignment_3");
					put(grammarAccess.getViewDeclarationAccess().getToAssignment_5(), "rule__ViewDeclaration__ToAssignment_5");
					put(grammarAccess.getViewDeclarationAccess().getViewDefinitionsAssignment_8(), "rule__ViewDeclaration__ViewDefinitionsAssignment_8");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			info.kwarc.mmt.ui.contentassist.antlr.internal.InternalLFParser typedParser = (info.kwarc.mmt.ui.contentassist.antlr.internal.InternalLFParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LFGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LFGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

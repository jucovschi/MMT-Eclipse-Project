/*
* generated by Xtext
*/
grammar InternalElf;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package info.kwarc.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package info.kwarc.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import info.kwarc.services.ElfGrammarAccess;

}

@parser::members {
 
 	private ElfGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ElfGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
(rule__Model__DeclarationsAssignment)*
{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenamespaceDeclaration
entryRulenamespaceDeclaration 
:
{ before(grammarAccess.getNamespaceDeclarationRule()); }
	 rulenamespaceDeclaration
{ after(grammarAccess.getNamespaceDeclarationRule()); } 
	 EOF 
;

// Rule namespaceDeclaration
rulenamespaceDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getGroup()); }
(rule__NamespaceDeclaration__Group__0)
{ after(grammarAccess.getNamespaceDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesignatureDeclaration
entryRulesignatureDeclaration 
:
{ before(grammarAccess.getSignatureDeclarationRule()); }
	 rulesignatureDeclaration
{ after(grammarAccess.getSignatureDeclarationRule()); } 
	 EOF 
;

// Rule signatureDeclaration
rulesignatureDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getGroup()); }
(rule__SignatureDeclaration__Group__0)
{ after(grammarAccess.getSignatureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesigDefinitions
entryRulesigDefinitions 
:
{ before(grammarAccess.getSigDefinitionsRule()); }
	 rulesigDefinitions
{ after(grammarAccess.getSigDefinitionsRule()); } 
	 EOF 
;

// Rule sigDefinitions
rulesigDefinitions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSigDefinitionsAccess().getGroup()); }
(rule__SigDefinitions__Group__0)
{ after(grammarAccess.getSigDefinitionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__DeclarationsAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsNamespaceDeclarationParserRuleCall_0_0()); }
	rulenamespaceDeclaration
{ after(grammarAccess.getModelAccess().getDeclarationsNamespaceDeclarationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getDeclarationsSignatureDeclarationParserRuleCall_0_1()); }
	rulesignatureDeclaration
{ after(grammarAccess.getModelAccess().getDeclarationsSignatureDeclarationParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getGroup_1_0()); }
(rule__NamespaceDeclaration__Group_1_0__0)
{ after(grammarAccess.getNamespaceDeclarationAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getNamespaceDeclarationAccess().getUriAssignment_1_1()); }
(rule__NamespaceDeclaration__UriAssignment_1_1)
{ after(grammarAccess.getNamespaceDeclarationAccess().getUriAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NamespaceDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group__0__Impl
	rule__NamespaceDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0()); }

	'%namespace' 

{ after(grammarAccess.getNamespaceDeclarationAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group__1__Impl
	rule__NamespaceDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getAlternatives_1()); }
(rule__NamespaceDeclaration__Alternatives_1)
{ after(grammarAccess.getNamespaceDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getNamespaceDeclarationAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamespaceDeclaration__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group_1_0__0__Impl
	rule__NamespaceDeclaration__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNameAssignment_1_0_0()); }
(rule__NamespaceDeclaration__NameAssignment_1_0_0)
{ after(grammarAccess.getNamespaceDeclarationAccess().getNameAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDeclaration__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group_1_0__1__Impl
	rule__NamespaceDeclaration__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getEqualsSignKeyword_1_0_1()); }

	'=' 

{ after(grammarAccess.getNamespaceDeclarationAccess().getEqualsSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDeclaration__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDeclaration__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getUriAssignment_1_0_2()); }
(rule__NamespaceDeclaration__UriAssignment_1_0_2)
{ after(grammarAccess.getNamespaceDeclarationAccess().getUriAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignatureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__0__Impl
	rule__SignatureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getSigKeyword_0()); }

	'%sig' 

{ after(grammarAccess.getSignatureDeclarationAccess().getSigKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__1__Impl
	rule__SignatureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getSigNameAssignment_1()); }
(rule__SignatureDeclaration__SigNameAssignment_1)
{ after(grammarAccess.getSignatureDeclarationAccess().getSigNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__2__Impl
	rule__SignatureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getSignatureDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__3__Impl
	rule__SignatureDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSignatureDeclarationAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__4__Impl
	rule__SignatureDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsAssignment_4()); }
(rule__SignatureDeclaration__SigDefinitionsAssignment_4)*
{ after(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__5__Impl
	rule__SignatureDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSignatureDeclarationAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignatureDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignatureDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getFullStopKeyword_6()); }

	'.' 

{ after(grammarAccess.getSignatureDeclarationAccess().getFullStopKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SigDefinitions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group__0__Impl
	rule__SigDefinitions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getSymbNameAssignment_0()); }
(rule__SigDefinitions__SymbNameAssignment_0)
{ after(grammarAccess.getSigDefinitionsAccess().getSymbNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SigDefinitions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group__1__Impl
	rule__SigDefinitions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getSigDefinitionsAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SigDefinitions__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group__2__Impl
	rule__SigDefinitions__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getTypeAssignment_2()); }
(rule__SigDefinitions__TypeAssignment_2)
{ after(grammarAccess.getSigDefinitionsAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SigDefinitions__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group__3__Impl
	rule__SigDefinitions__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getGroup_3()); }
(rule__SigDefinitions__Group_3__0)?
{ after(grammarAccess.getSigDefinitionsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SigDefinitions__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_4()); }

	'.' 

{ after(grammarAccess.getSigDefinitionsAccess().getFullStopKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SigDefinitions__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group_3__0__Impl
	rule__SigDefinitions__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getSigDefinitionsAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SigDefinitions__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SigDefinitions__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSigDefinitionsAccess().getIDTerminalRuleCall_3_1()); }
(	RULE_ID)
{ after(grammarAccess.getSigDefinitionsAccess().getIDTerminalRuleCall_3_1()); }
)
(
{ before(grammarAccess.getSigDefinitionsAccess().getIDTerminalRuleCall_3_1()); }
(	RULE_ID)*
{ after(grammarAccess.getSigDefinitionsAccess().getIDTerminalRuleCall_3_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DeclarationsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAlternatives_0()); }
(rule__Model__DeclarationsAlternatives_0)
{ after(grammarAccess.getModelAccess().getDeclarationsAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__NameAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getNameIDTerminalRuleCall_1_0_0_0()); }
	RULE_ID{ after(grammarAccess.getNamespaceDeclarationAccess().getNameIDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__UriAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_0_2_0()); }
	RULE_URI{ after(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDeclaration__UriAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_1_0()); }
	RULE_URI{ after(grammarAccess.getNamespaceDeclarationAccess().getUriURITerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__SigNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getSigNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSignatureDeclarationAccess().getSigNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignatureDeclaration__SigDefinitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsSigDefinitionsParserRuleCall_4_0()); }
	rulesigDefinitions{ after(grammarAccess.getSignatureDeclarationAccess().getSigDefinitionsSigDefinitionsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__SymbNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getSymbNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getSigDefinitionsAccess().getSymbNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SigDefinitions__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSigDefinitionsAccess().getTypeIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getSigDefinitionsAccess().getTypeIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



RULE_INT : ('0'..'9')+;

RULE_URI : '"' ('a'..'z'|'A'..'Z'|'/'|':'|'.'|'-'|'%')+ '"';

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '%{' ( options {greedy=false;} : . )*'}%';

RULE_ML2_COMMENT : '%*' ( options {greedy=false;} : . )*'*%';

RULE_SL_COMMENT : '%' (' '|'%') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ~(('"'|'\''|'%'|'*'|'{'|'}'|'.'|'['|']'|'='|':'|' '))*;

RULE_ANY_OTHER : .;


